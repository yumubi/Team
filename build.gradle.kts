// Generated by https://start.springboot.io
// 优质的 spring/boot/data/security/cloud 框架中文文档尽在 => https://springdoc.cn
plugins {
    java
    id("org.springframework.boot") version "3.0.12"
    id("io.spring.dependency-management") version "1.1.3"
}

group = "io.goji"
version = "0.0.1-SNAPSHOT"

java {
    sourceCompatibility = JavaVersion.VERSION_17

}

configurations {
    compileOnly {
        extendsFrom(configurations.annotationProcessor.get())
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-actuator
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-data-redis")
    // https://mvnrepository.com/artifact/org.apache.commons/commons-pool2
    implementation("org.apache.commons:commons-pool2:2.11.1")
// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation("org.apache.commons:commons-lang3:3.13.0")

    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("com.baomidou:mybatis-plus-boot-starter:3.5.3.2")
    // https://mvnrepository.com/artifact/com.baomidou/dynamic-datasource-spring-boot-starter
    implementation("com.baomidou:dynamic-datasource-spring-boot-starter:3.5.2")

    implementation("com.github.xiaoymin:knife4j-openapi3-jakarta-spring-boot-starter:4.3.0")
    implementation("cn.hutool:hutool-all:5.8.21")
// https://mvnrepository.com/artifact/eu.bitwalker/UserAgentUtils
    implementation("eu.bitwalker:UserAgentUtils:1.21")

// https://mvnrepository.com/artifact/commons-io/commons-io
    implementation("commons-io:commons-io:2.13.0")

    // https://mvnrepository.com/artifact/org.lionsoul/ip2region
    implementation("org.lionsoul:ip2region:2.7.0")

//// https://mvnrepository.com/artifact/org.apache.poi/poi
//    implementation("org.apache.poi:poi:4.1.2")
//    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml-schemas
//    implementation("org.apache.poi:poi-ooxml-schemas:4.1.2")
//

    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
    implementation("org.apache.poi:poi-ooxml:5.2.4")


//    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml-lite
//    implementation("org.apache.poi:poi-ooxml-lite:5.2.4")



    // https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-api
    implementation("io.jsonwebtoken:jjwt-api:0.11.5")
// https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-impl
    runtimeOnly("io.jsonwebtoken:jjwt-impl:0.11.5")
// https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-jackson
    runtimeOnly("io.jsonwebtoken:jjwt-jackson:0.11.5")

    compileOnly("org.projectlombok:lombok")
    runtimeOnly("com.mysql:mysql-connector-j")
    // https://mvnrepository.com/artifact/com.h2database/h2
    runtimeOnly("com.h2database:h2:2.2.224")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    annotationProcessor("org.projectlombok:lombok")
    testImplementation("org.springframework.boot:spring-boot-starter-test")


}



tasks.withType<JavaExec> {
    systemProperty("file.encoding", "utf-8")
}

tasks.withType<Test>().configureEach {
    systemProperty("file.encoding", "UTF-8")
    useJUnitPlatform()
}
tasks.withType<JavaCompile>().configureEach{
    options.encoding = "UTF-8"
}

